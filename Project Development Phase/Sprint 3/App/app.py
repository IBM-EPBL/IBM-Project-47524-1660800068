# -*- coding: utf-8 -*-
"""app3.py
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1SXjVMCvbeYc2k8Xq8_LW9QlCgELSiDL-
"""

from_future_import division, print_function

import os

import numpy as np
import tensorflow as tf
from flask import Flask, redirect, render_template, request
from keras.applications.inception_v3 import preprocess_input
from keras.models import model_from_json
from werkzeug.utils import secure_filename

global graph
graph=tf.compat.v1.get_default_graph()
#this list is used to log the predictions in the server console
predictions = ["Corpse Flower",
               "Great Indian Bustard",
               "Lady's slipper orchid",
               "Pangolin",
               "Spoon Billed Sandpiper",
               "Seneca White Deer"
               ]
#this list contains the link to the predicted species
found = [
    "C:\Users\prais\OneDrive\Desktop\Digital Naturalist Dataset\Bird\Great Indian Bustard Bird"
    "C:\Users\prais\OneDrive\Desktop\Digital Naturalist Dataset\Bird\Spoon Billed Sandpiper Bird"
    "C:\Users\prais\OneDrive\Desktop\Digital Naturalist Dataset\Flower\Corpse Flower"
    "C:\Users\prais\OneDrive\Desktop\Digital Naturalist Dataset\Flower\Lady Slipper Orchid Flower"
    "C:\Users\prais\OneDrive\Desktop\Digital Naturalist Dataset\Mammal\Pangolin Mammal"
    "C:\Users\prais\OneDrive\Desktop\Digital Naturalist Dataset\Mammal\Senenca White Deer Mammal"
        ]
app = Flask(_name_)

@app.route('/', methods=['GET'])
def index():
     # Home Page
     return render_template("index.html")
@app.route('/predict', methods=['GET', 'POST'])
def upload():
  if request.method== 'GET':
    return("<h6 style=\"font-face:\"Courier New\";\">No GET request herd.....</h6 >")
  if request.method== 'POST':
    # fecting the uploaded image from the post request using the id 'uploadedimg'
    f = request.files['uploadedming']
    basepath = os.path.dirname(_file_)
    #securing the  file by creating a path in local storage
    file_path = os.path.join(basepath, 'uploads', secure_filename(f.filename))
    #Saving the uploaded image locally
    f.save(file_path)
    #loading the locally saved image
    img = tf.keras.utils.load_img(file_path, target_size=(224, 224))
    #converting the loaded image to image array
    x = tf.keras.utils.img_to_array(img)
    x = preprocess_input(x)
    #converting the preprocessed image to numpy array
    inp = np.array([x])
    with graph.as_default():
      #loading the saved model from training
      json_file = open('/content/drive/MyDrive/digital naturalist.json')
      loaded_model_json = json_file.read()
      json_file.close()
      loaded_model = model_from_json(loaded_model_json)
      #adding weights to the trained model 
      loaded_model.load_weights('/content/drive/MyDrive/Digitalnaturalist(2).h5')
      
      #predecting the image
      preds = np.argmax(loaded_model.predict(inp),axis=1)
      #logs are printed to the console
      print("predicted the species " + str(predictions[preds[0]]))
   text = found[preds[0]]
   return rediresct(text)


  if _name_ == '_main_':
    #Threads enabled so multiple users can request simutaneously
    #debud is turned off, turn on during development to debug the errors
    #applications is binded to port 8000
    app.run(threaded = True,debug=True,port="8000")